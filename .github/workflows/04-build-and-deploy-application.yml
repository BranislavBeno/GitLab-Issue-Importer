# This workflow builds the Docker image for the gitlab-issue-importer and then deploys the application.
name: 04 - Build and deploy the application to DockerHub and to AWS

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

on:
  workflow_run:
    workflows: [ 03 - Run application tests ]
    types: [ completed ]
    branches: [ main ]

jobs:
  changes:
    name: Detect relevant source changes
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      app: ${{ steps.filter.outputs.app }}
      cdk: ${{ steps.filter.outputs.cdk }}
      gradle-app: ${{ steps.filter.outputs.gradle-app }}
      gradle-cdk: ${{ steps.filter.outputs.gradle-cdk }}
      dockerfile: ${{ steps.filter.outputs.dockerfile }}
      workflow-deploy: ${{ steps.filter.outputs.workflow-deploy }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Run changes detection
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            app:
              - 'app/src/main/**'
            cdk:
              - 'cdk/**/*Service*'
            gradle-app:
              - 'app/build.gradle.kts'
            gradle-cdk:
              - 'cdk/build.gradle.kts'
            dockerfile:
              - 'Dockerfile'
            workflow-deploy:
              - '.github/workflows/04-build-and-deploy-application.yml'

  build-and-publish:
    name: Build and publish the application
    runs-on: ubuntu-22.04
    outputs:
      DOCKER_IMAGE_TAG: ${{ steps.create-docker-image-tag.outputs.DOCKER_IMAGE_TAG }}
    needs: changes
    if: ${{ needs.changes.outputs.app == 'true' || needs.changes.outputs.cdk == 'true' || needs.changes.outputs.gradle-app == 'true' || needs.changes.outputs.gradle-cdk == 'true' || needs.changes.outputs.dockerfile == 'true' || needs.changes.outputs.workflow-deploy == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build Docker image and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            beo1975/gitlab-issue-importer:1.0.0
            beo1975/gitlab-issue-importer:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create docker image tag
        id: create-docker-image-tag
        run: echo "DOCKER_IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Push image to AWS ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          DOCKER_IMAGE_TAG: ${{ steps.create-docker-image-tag.outputs.DOCKER_IMAGE_TAG }}
        run: |
          docker buildx imagetools create \
            --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/gitlab-issue-importer:${DOCKER_IMAGE_TAG} \
            --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/gitlab-issue-importer:latest \
            beo1975/gitlab-issue-importer:latest

  scan-docker-image:
    name: Check Docker image for vulnerabilities
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    needs: build-and-publish
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Scan Docker image
        continue-on-error: true
        uses: snyk/actions/docker@master
        with:
          image: beo1975/gitlab-issue-importer:latest
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy the application to AWS
    needs: build-and-publish
    timeout-minutes: 15
    concurrency: gitlab-issue-importer-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'zulu'
          cache: 'gradle'

      - name: NPM install
        working-directory: cdk
        run: |
          npm i -D aws-cdk@latest
          rm -fr node_modules package-lock.json cdk.out
          npm i

      - name: Deploy service stack to staging
        env:
          DOCKER_IMAGE_TAG: ${{ needs.build-and-publish.outputs.DOCKER_IMAGE_TAG }}
        working-directory: cdk
        run: npm run service:deploy -- -c dockerImageTag=${DOCKER_IMAGE_TAG} -c environmentName=staging
